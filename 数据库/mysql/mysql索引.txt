https://blog.csdn.net/u014172271/article/details/103404479
https://blog.csdn.net/justlpf/article/details/106838306?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&spm=1001.2101.3001.4242
mysql的日志类型以及用途

1、加载缓存数据，加载id为1的记录所在的整页数据
2、往undo日志文件里写入更新数据的旧值，便于回滚
3、更新内存数据
4、往redo日志文件里写redo日志
5、准备提交事务，redo日志写入磁盘
6、准备提交事务，binlog日志写入磁盘
7、
8、写入磁盘，以page为单位写入


索引的常见模型：
①哈希表是一种以键值存储数据的结构，输入待查找的key，就可以通过哈希函数把key换算成一个确定的位置，然后把value
放在数组的这个位置。优点是增加新的元素时很快，因为只需要在哈希冲突时只需要往后追加即可。缺点是因为元素不是有序
的，所以哈希索引做区间查询的速度是很慢的，需要全表扫描一遍。
哈希表这种结构适用于只有等值查询的场景。
②有序数组在等值查询和范围查询的场景中性能都非常优秀。但是在更新数据的时候很麻烦，往中间插入一个记录就必须得挪动后面所有的记录。
③二叉树
在递增插入元素时会退化成链表，查询时性能没有提升，查询每个索引都要进行一次磁盘IO
④红黑树
在存储大量元素时，树的高度也会很高
⑤B-Tree
叶节点具有相同的深度，叶节点的指针为空
所有索引元素不重复
节点中的数据索引从左到右递增排列
⑥B+Tree，相比B树的优势是【】处的内容
【非叶子节点不存储data】，只存储索引（冗余），可以放更多的索引
叶子结点包含所有索引字段
【叶子节点用指针连接】，提高区间访问的性能

MyISAM存储引擎索引实现（该类型表由.frm、.MYD、.MYI三个文件保存）
查找字段建立了索引，会先在.MYI文件保存的索引树上找到该索引所在行的数据在.MYD这个磁盘文件的地址，然后根据地址再去.MYD文件获取数据。
InnoDb存储引擎索引实现（该类型表由.frm、.ibd两个文件保存）聚集索引：叶节点包含了完整的数据记录
主键索引就是聚集索引，叶子节点包含了完整的数据结构，非主键索引的叶子结点存储的是主键值，因此通过主键索引查找只需要一次树搜索，但是通过二级索引就需要两次树搜索了，因为拿到主键值后要回表去主键索引里查找完整的数据记录

问题：
为什么建议InnoDB表必须建主键，并且推荐使用整型的自增主键？
不建的话InnoDB会自己去找一列唯一列来构建B+树，找不到的话也会后台新增一列rowId来维护，所以自己建主键的话可以节省InnoDB的资源，利于InnoDB高效的去做其他的事情。
整型字段查找比字符串快，占用空间也小。
