MyISAM引擎的实现方式：把一个表的总行数放在磁盘上，因此在执行count(*)的时候会直接返回个数，效率很高。
InnoDB引擎：执行count(*)的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。
三个会话同时查询表的总行数时，拿到的结果不同，这和InnoDB的事务设计有关系，可重复读是它的默认隔离级别，在代码上是通过多版本并发控制，也就是MVCC来实现的。每一行记录都要判断自己是否对这个会话可见，因此对于count(*)请求来说，InnoDB只好把数据一行一行地读出来依次判断，可见的行才能够用于计算“基于这个查询”的表的总行数。
总结：
MyISAM表虽然count(*)很快，但是不支持事务；
show table status命令虽然返回很快，但是不准确；
InnoDB表直接count(*)会遍历全表，虽然结果准确，但会导致性能问题。

解决思路：
①用缓存系统保存计数
将计数保存在缓存系统中的方式，不仅仅是丢失更新的问题，即使redis正常工作，这个值还是逻辑上不精确的。
此种方式存在问题：把计数放在redis里面，不能保证计数和mysql表里的数据精确一致的原因，是这两个不同的存储构成的系统，不支持分布式事务，无法拿到精确一致的视图，而把计数值也放在mysql中，就解决了一致性视图的问题。
②在数据库保存计数
此种方法能解决计数不精确的问题，原因是InnoDB的事务特性，本身问题是由于事务特性，不同会话下查询表的总行数时，结果是不一样的。此时即使执行读计数值和查询最近100条记录的操作时刻是不确定的，但是因为这时候更新事务还没有提交，所以计数值加1的这个操作对另外一个会话是不可见的。因此，在另一个会话中看到的结果就是查计数值和最近100条记录看到的结果在逻辑上就是一致的。

count(*)、count(主键id)、count(1)都表示返回满足条件的结果集的总行数，而count(字段)则表示返回满足条件的数据行里面，参数“字段”不为NULL的总个数。

对于count(主键id)来说，InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层。server层拿到id后，判断是不可能为空的，就按行累加。
对于count(1)来说，InnoDB引擎遍历整张表，但不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。
对于count(字段)来说，如果这个字段是定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累加。如果这个字段定义允许为null，那么执行的时候，判断有可能是null，还要把值取出来再判断一下，不是null才累加。
count(*)是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(*)肯定不是null，按行累加。











