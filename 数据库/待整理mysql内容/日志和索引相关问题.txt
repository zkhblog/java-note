如果没有两阶段提交，会导致mysql出现主备数据不一致等问题。
在两阶段提交的不同瞬间，mysql如果发生异常重启，是怎么保证数据完整性的。
接下来的分析是在两阶段提交的不同时刻，mysql异常重启会出现什么现象。
一、在写入redo log处于prepare阶段之后，写binlog之前，发生了崩溃，由于此时binlog还没写，redolog也还没提交，所以崩溃恢复的时候，这个事务会回滚。这时候，binlog还没写，所以也不会传到备库。到这里，大家都可以理解。
二、在写完binlog之后，redolog还没commit前发生崩溃。
此时崩溃恢复时的判断规则是如果redolog里面的事务是完整的，也就是有了commit标识，则直接提交；
如果redolog里面的事务只有完整的prepare，则判断对应的事务binlog是否存在并完整：如果是，则提交事务；否则，回滚事务。

问题总结：
①判断binlog的完整性，是通过格式来判断的，一个事务的binlog是有完整格式的。
②redo log和binlog是通过一个共同的数据字段，叫XID关联起来的。崩溃恢复的时候，会按顺序扫描redolog。
如果redolog日志既有prepare、又有commit，就直接提交；
如果redolog日志只有prepare、而没有commit，就拿着XID去binlog找对应的事务。然后binlog的完整性来判断是否提交或回滚。
③处于prepare节阶段的redolog加上完整的binlog，重启就能恢复，mysql这么设计的原因是为了保证主库和备库的一致性，如果不这么设计，binlog写完后mysql发生崩溃，这时候binlog已经写入了，之后就会被从库（或者使用这个binlog恢复出来的库）使用。
④为什么要两阶段提交，而不是redolog写完，再写binlog。
对于InnoDB引擎来说，如果redolog提交完成了，事务就不能回滚。而如果redolog直接提交，然后binlog写入的时候失败，InnoDB又回滚不了，数据和binlog日志又不一致了。













































